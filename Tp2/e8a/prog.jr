import edu.ucdavis.jr.JR;
import java.util.Random;

        
public class prog{
    static Random r;
    static final int n = 8;
    static final int m = 8;

    static final int l = 10;
    static int[] buffer;

    static sem escritores = 1;//para que escriba un escritor a la vez 
    static sem escribir = 0;//para que el escritor que quiera escribir espere a que no este nadie leyendo
    static int escribiendo = 0;//para contar los escritores 1/0
    static sem mutex = 1;

    static sem lectores = 1;//para quese cuenten los lectores
    static int leyendo = 0;//para contar los lectores

    static op void espera(int t){
        try{Thread.sleep(t);}catch(Exception e){}
    }

    static process E((int i = 0; i<n; i++)){
        while(true){
            P(escritores);
                P(mutex);
                    escribiendo = 1;
                V(mutex);
                P(escribir);//este es activado cuando no hay lectores, si no hay lectores, escribo y luego si aun no hay lectores, el escritor se quedarÃ¡ esperando igual, por ello este algoritmo tiene como prioridad los lectores por sobre los escritores
                    int idx = (int)(Math.random()*l);
                    buffer[idx] = (int)(Math.random()*100 / Math.random());
                    System.out.println("P"+i+" escibiendo "+buffer[idx]+" en pos "+idx);
                    P(mutex);
                        escribiendo = 0;
                    V(mutex);

            V(escritores);
        }
    }

    static process L((int i = 0; i<m; i++)){
        while(true){
            P(mutex);
            if(!(escribiendo == 0)){
                V(mutex);
                P(lectores);
                    leyendo +=1;
                V(lectores);
                int idx = (int)(Math.random()*l);
                System.out.println("P"+i+" leyendo "+buffer[idx]+" en pos "+idx);
                P(lectores);
                    leyendo -=1;
                    if(leyendo == 0){
                        V(escribir);
                    }
                V(lectores);
                
            }else{V(mutex);}
        }
    }

    public static void main(String[] args){
        buffer = new int[l];
        r = new Random();
        prog p = new prog();
    }
}
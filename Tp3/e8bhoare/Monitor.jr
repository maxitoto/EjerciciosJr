/* This JR file was generated by m2jr */
/* for the signal and wait signaling discipline */


// Monitor.m, line 1: import java.util.LinkedList;

import
java
.util
.LinkedList
;
// Monitor.m, line 2: _monitor Monitor{

class Monitor {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public Monitor(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// Monitor.m, line 3:     _var LinkedList bufferS = new LinkedList();

private LinkedList
bufferS
=new
LinkedList
();
// Monitor.m, line 4: 


// Monitor.m, line 5:     _condvar esperaraconsumir;


// Monitor.m, line 6: 


// Monitor.m, line 7:     _proc void producir(int id){

private m_condvar esperaraconsumir = new m_condvar("esperaraconsumir");
public
void
producir
(int
id
){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 8:         //produccion sin limites


// Monitor.m, line 9:         bufferS.add((int)(Math.random()*50));

bufferS
.add
((int
)(Math
.random
()*50));
// Monitor.m, line 10:         System.out.println("productor "+id+" produce "+bufferS.getLast());

System
.out
.println
("productor "+id
+" produce "+bufferS
.getLast
());
// Monitor.m, line 11:         if(bufferS.size()==1){

if
(bufferS
.size
()==1){
// Monitor.m, line 12:             _signal(esperaraconsumir);

{ if ((esperaraconsumir ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 13:         }


// Monitor.m, line 14:     }

}
// Monitor.m, line 15: 


// Monitor.m, line 16:     _proc void consumir(int id){

  m_next();
}
public
void
consumir
(int
id
){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 17:         if(bufferS.size()==0){

if
(bufferS
.size
()==0){
// Monitor.m, line 18:             _wait(esperaraconsumir);

{  m_condvar m_cv = (esperaraconsumir );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 19:         }


// Monitor.m, line 20:         System.out.println("consumidor "+id+" consume "+bufferS.poll()); 

}System
.out
.println
("consumidor "+id
+" consume "+bufferS
.poll
());
// Monitor.m, line 21:     }


// Monitor.m, line 22: 


// Monitor.m, line 23: }
  m_next();
}
}

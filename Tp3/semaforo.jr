/* This JR file was generated by m2jr */
/* for the signal and continue signaling discipline */


// semaforo.m, line 1: _monitor semaforo{

class semaforo {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public semaforo(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// semaforo.m, line 2:     _var int esperando = 1;

private int
esperando
=1;
// semaforo.m, line 3:     _condvar s;


// semaforo.m, line 4:     


// semaforo.m, line 5:     _proc void await(){

private m_condvar s = new m_condvar("s");
public
void
await
(){
    op void m_return_from_wait();
    P(m_mutex);

// semaforo.m, line 6:         while(esperando == 0){_wait(s);}

while
(esperando
==0){{  m_condvar m_cv = (s );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// semaforo.m, line 7:         --esperando;

}--esperando
;
// semaforo.m, line 8:     }


// semaforo.m, line 9:     


// semaforo.m, line 10:     _proc void asignal(){

  m_next();
}
public
void
asignal
(){
    op void m_return_from_wait();
    P(m_mutex);

// semaforo.m, line 11:         ++esperando;

++esperando
;
// semaforo.m, line 12:         _signal(s);

(s ).m_signal();

// semaforo.m, line 13:     }


// semaforo.m, line 14: }
  m_next();
}
}

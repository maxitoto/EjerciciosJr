/* This JR file was generated by m2jr */
/* for the signal and continue signaling discipline */


// Monitor.m, line 1: _monitor Monitor{

class Monitor {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public Monitor(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// Monitor.m, line 2:     //_var int cantidadDeRuedas = 0;


// Monitor.m, line 3:     //_var boolean cuadro = false;


// Monitor.m, line 4:     //_var boolean manillar = false;


// Monitor.m, line 5:     //los OP no tinen donde guardar los componentes producidos


// Monitor.m, line 6: 


// Monitor.m, line 7:     _condvar terminenLaPrimerRueda;


// Monitor.m, line 8:     _condvar terminenLasRuedas;

private m_condvar terminenLaPrimerRueda = new m_condvar("terminenLaPrimerRueda");

// Monitor.m, line 9:     _condvar terminenUnaRueda;

private m_condvar terminenLasRuedas = new m_condvar("terminenLasRuedas");

// Monitor.m, line 10:     _condvar terminenOtraRueda;

private m_condvar terminenUnaRueda = new m_condvar("terminenUnaRueda");

// Monitor.m, line 11:     _condvar terminenElManillar;

private m_condvar terminenOtraRueda = new m_condvar("terminenOtraRueda");

// Monitor.m, line 12:     _condvar termineneElCuadro;

private m_condvar terminenElManillar = new m_condvar("terminenElManillar");

// Monitor.m, line 13:     _condvar pidanUnCuadro;

private m_condvar termineneElCuadro = new m_condvar("termineneElCuadro");

// Monitor.m, line 14: 


// Monitor.m, line 15: _proc void ensamblarBicicleta(){

private m_condvar pidanUnCuadro = new m_condvar("pidanUnCuadro");
public
void
ensamblarBicicleta
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 16:     System.out.println("El montador solcita las partes de una bicicleta");

System
.out
.println
("El montador solcita las partes de una bicicleta");
// Monitor.m, line 17:     _signal(pidanUnCuadro);

(pidanUnCuadro ).m_signal();

// Monitor.m, line 18: 


// Monitor.m, line 19:     System.out.println("El montador espera a que terminen de fabricar los componentes");

System
.out
.println
("El montador espera a que terminen de fabricar los componentes");
// Monitor.m, line 20:     _wait(terminenLasRuedas);

{  m_condvar m_cv = (terminenLasRuedas );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 21:     System.out.println("El montador arma una bicileta");

System
.out
.println
("El montador arma una bicileta");
// Monitor.m, line 22: }


// Monitor.m, line 23: 


// Monitor.m, line 24: _proc void montarCuadro(){

  m_next();
}
public
void
montarCuadro
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 25:     _wait(pidanUnCuadro);

{  m_condvar m_cv = (pidanUnCuadro );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 26:     System.out.println("El Op1 termino el cuadro");

System
.out
.println
("El Op1 termino el cuadro");
// Monitor.m, line 27:     _signal(termineneElCuadro);

(termineneElCuadro ).m_signal();

// Monitor.m, line 28: }


// Monitor.m, line 29: 


// Monitor.m, line 30: _proc void montarManillar(){

  m_next();
}
public
void
montarManillar
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 31:     _wait(termineneElCuadro);

{  m_condvar m_cv = (termineneElCuadro );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 32:     System.out.println("El Op2 termino el manillar");

System
.out
.println
("El Op2 termino el manillar");
// Monitor.m, line 33:     _signal(terminenUnaRueda);

(terminenUnaRueda ).m_signal();

// Monitor.m, line 34: 


// Monitor.m, line 35:     _wait(terminenLaPrimerRueda);

{  m_condvar m_cv = (terminenLaPrimerRueda );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 36:     _signal(terminenOtraRueda);

(terminenOtraRueda ).m_signal();

// Monitor.m, line 37: }


// Monitor.m, line 38: 


// Monitor.m, line 39: _proc void montarRuedas(){

  m_next();
}
public
void
montarRuedas
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 40:     _wait(terminenUnaRueda);

{  m_condvar m_cv = (terminenUnaRueda );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 41:     System.out.println("El Op3 termino una rueda");

System
.out
.println
("El Op3 termino una rueda");
// Monitor.m, line 42:     _signal(terminenLaPrimerRueda);

(terminenLaPrimerRueda ).m_signal();

// Monitor.m, line 43:     _wait(terminenOtraRueda);

{  m_condvar m_cv = (terminenOtraRueda );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 44:     System.out.println("El Op3 termino otra rueda");

System
.out
.println
("El Op3 termino otra rueda");
// Monitor.m, line 45:     _signal(terminenLasRuedas);

(terminenLasRuedas ).m_signal();

// Monitor.m, line 46: }


// Monitor.m, line 47: 


// Monitor.m, line 48: }
  m_next();
}
}

/* This JR file was generated by m2jr */
/* for the signal and continue signaling discipline */


// Monitor.m, line 1: _monitor Monitor{ 

class Monitor {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public Monitor(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// Monitor.m, line 2:     _var boolean nolistoparacobrar = true;

private boolean
nolistoparacobrar
=true
;
// Monitor.m, line 3:     _var boolean nolistoparapagar = true;

private boolean
nolistoparapagar
=true
;
// Monitor.m, line 4:     _var boolean barberoNohaTerminado = true;

private boolean
barberoNohaTerminado
=true
;
// Monitor.m, line 5:     _var boolean corteNoTeminado = true;

private boolean
corteNoTeminado
=true
;
// Monitor.m, line 6:     _var boolean sillaLibre = true;

private boolean
sillaLibre
=true
;
// Monitor.m, line 7:     _var boolean barberoLibre = true;

private boolean
barberoLibre
=true
;
// Monitor.m, line 8:     _var int clientesEsperando = 0;

private int
clientesEsperando
=0;
// Monitor.m, line 9: 


// Monitor.m, line 10:     _condvar llegueUnCliente;


// Monitor.m, line 11:     _condvar poderAtenderme;

private m_condvar llegueUnCliente = new m_condvar("llegueUnCliente");

// Monitor.m, line 12:     _condvar terminadoA;

private m_condvar poderAtenderme = new m_condvar("poderAtenderme");

// Monitor.m, line 13:     _condvar terminadoB;

private m_condvar terminadoA = new m_condvar("terminadoA");

// Monitor.m, line 14:     _condvar aCobrar;

private m_condvar terminadoB = new m_condvar("terminadoB");

// Monitor.m, line 15:     _condvar pagar;

private m_condvar aCobrar = new m_condvar("aCobrar");

// Monitor.m, line 16: 


// Monitor.m, line 17:     _proc void duermeOtrabaja(){

private m_condvar pagar = new m_condvar("pagar");
public
void
duermeOtrabaja
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 18:         while(clientesEsperando==0 & sillaLibre){

while
(clientesEsperando
==0&sillaLibre
){
// Monitor.m, line 19:             System.out.println("No hay nadie a quien atender entonces barbero duerme por "+clientesEsperando+" "+sillaLibre);

System
.out
.println
("No hay nadie a quien atender entonces barbero duerme por "+clientesEsperando
+" "+sillaLibre
);
// Monitor.m, line 20:             _wait(llegueUnCliente);

{  m_condvar m_cv = (llegueUnCliente );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 21:         }


// Monitor.m, line 22:         barberoLibre = false;

}barberoLibre
=false
;
// Monitor.m, line 23:         System.out.println("Barbero va a atender");

System
.out
.println
("Barbero va a atender");
// Monitor.m, line 24:     }//aqui el barbero duerme o continua trabajando


// Monitor.m, line 25: 


// Monitor.m, line 26:     _proc void cortarPelo(){

  m_next();
}
public
void
cortarPelo
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 27:         barberoNohaTerminado=false;

barberoNohaTerminado
=false
;
// Monitor.m, line 28:         while(corteNoTeminado){

while
(corteNoTeminado
){
// Monitor.m, line 29:             _wait(terminadoA);

{  m_condvar m_cv = (terminadoA );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 30:         }


// Monitor.m, line 31:         _signal(terminadoB);

}(terminadoB ).m_signal();

// Monitor.m, line 32:         System.out.println("Barbero corta el cabello a cliente");

System
.out
.println
("Barbero corta el cabello a cliente");
// Monitor.m, line 33:     }//aqui se sincroniza con el cliente para cortar


// Monitor.m, line 34: 


// Monitor.m, line 35:     _proc void cobrarAlCliente(){

  m_next();
}
public
void
cobrarAlCliente
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 36:         nolistoparacobrar=false;

nolistoparacobrar
=false
;
// Monitor.m, line 37:         while(nolistoparapagar){

while
(nolistoparapagar
){
// Monitor.m, line 38:             _wait(aCobrar);

{  m_condvar m_cv = (aCobrar );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 39:         }


// Monitor.m, line 40:         _signal(pagar);

}(pagar ).m_signal();

// Monitor.m, line 41:         System.out.println("Barbero le cobra al cliente");

System
.out
.println
("Barbero le cobra al cliente");
// Monitor.m, line 42:     }//aqui se sincroniza con el cliente para cortar


// Monitor.m, line 43: 


// Monitor.m, line 44:     _proc void ingresar(){  

  m_next();
}
public
void
ingresar
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 45:         clientesEsperando++;

clientesEsperando
++;
// Monitor.m, line 46:         while(!(sillaLibre)){       

while
(!(sillaLibre
)){
// Monitor.m, line 47:             System.out.println("Cliente debe esperar");

System
.out
.println
("Cliente debe esperar");
// Monitor.m, line 48:             _wait(poderAtenderme);

{  m_condvar m_cv = (poderAtenderme );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 49:         }


// Monitor.m, line 50: 


// Monitor.m, line 51:         sillaLibre=false;

}sillaLibre
=false
;
// Monitor.m, line 52:         _signal(llegueUnCliente);

(llegueUnCliente ).m_signal();

// Monitor.m, line 53:         System.out.println("Cliente sera atendido");

System
.out
.println
("Cliente sera atendido");
// Monitor.m, line 54: 


// Monitor.m, line 55:     }//aqui o se sienta uno o espera con los demas


// Monitor.m, line 56: 


// Monitor.m, line 57:     _proc void seCortaElPelo(){

  m_next();
}
public
void
seCortaElPelo
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 58:         corteNoTeminado=false;

corteNoTeminado
=false
;
// Monitor.m, line 59:         while(barberoNohaTerminado){

while
(barberoNohaTerminado
){
// Monitor.m, line 60:             _wait(terminadoB);

{  m_condvar m_cv = (terminadoB );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 61:         }


// Monitor.m, line 62:           _signal(terminadoA);

}(terminadoA ).m_signal();

// Monitor.m, line 63:         System.out.println("Cliente le corta el cabello el barbero");

System
.out
.println
("Cliente le corta el cabello el barbero");
// Monitor.m, line 64:     }//aqui se sincroniza con el barbero para cortar


// Monitor.m, line 65: 


// Monitor.m, line 66:     _proc void pagaAlBarebero(){

  m_next();
}
public
void
pagaAlBarebero
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 67:         nolistoparapagar=false;

nolistoparapagar
=false
;
// Monitor.m, line 68:         while(nolistoparacobrar){

while
(nolistoparacobrar
){
// Monitor.m, line 69:             _wait(pagar);

{  m_condvar m_cv = (pagar );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 70:         }


// Monitor.m, line 71:         _signal(aCobrar);

}(aCobrar ).m_signal();

// Monitor.m, line 72:         System.out.println("Cliente le paga al barbero");

System
.out
.println
("Cliente le paga al barbero");
// Monitor.m, line 73:     }//aqui se sincroniza con el barbero para pagar


// Monitor.m, line 74: 


// Monitor.m, line 75:     _proc void seVa(){

  m_next();
}
public
void
seVa
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 76:         nolistoparacobrar=true;

nolistoparacobrar
=true
;
// Monitor.m, line 77:         nolistoparapagar=true;

nolistoparapagar
=true
;
// Monitor.m, line 78:         barberoNohaTerminado=true;

barberoNohaTerminado
=true
;
// Monitor.m, line 79:         corteNoTeminado=true;

corteNoTeminado
=true
;
// Monitor.m, line 80:         sillaLibre=true;

sillaLibre
=true
;
// Monitor.m, line 81:         barberoLibre=true;

barberoLibre
=true
;
// Monitor.m, line 82:         clientesEsperando--;

clientesEsperando
--;
// Monitor.m, line 83:         System.out.println("Cliente se va y deja su silla y hay "+clientesEsperando+" clientes esperando");

System
.out
.println
("Cliente se va y deja su silla y hay "+clientesEsperando
+" clientes esperando");
// Monitor.m, line 84:         if(clientesEsperando>0){_signal(poderAtenderme);}

if
(clientesEsperando
>0){(poderAtenderme ).m_signal();

// Monitor.m, line 85:         else{_signal(llegueUnCliente);}//para el print nada mas

}else
{(llegueUnCliente ).m_signal();

// Monitor.m, line 86:         


// Monitor.m, line 87:     }//aqui el cliente se va de la barberia

}
// Monitor.m, line 88: }
  m_next();
}
}

/* This JR file was generated by m2jr */
/* for the signal and wait signaling discipline */


// Monitor.m, line 1: _monitor Monitor{

class Monitor {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public Monitor(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// Monitor.m, line 2: 


// Monitor.m, line 3:     _var boolean p = false;

private boolean
p
=false
;
// Monitor.m, line 4:     _condvar ponganLaPizza;


// Monitor.m, line 5: 


// Monitor.m, line 6:     _var boolean s = false;

private m_condvar ponganLaPizza = new m_condvar("ponganLaPizza");
private boolean
s
=false
;
// Monitor.m, line 7:     _condvar ponganLaSalsa;


// Monitor.m, line 8: 


// Monitor.m, line 9:     _var boolean q = false;

private m_condvar ponganLaSalsa = new m_condvar("ponganLaSalsa");
private boolean
q
=false
;
// Monitor.m, line 10:     _condvar ponganElQueso;


// Monitor.m, line 11: 


// Monitor.m, line 12:     _var boolean t = false;

private m_condvar ponganElQueso = new m_condvar("ponganElQueso");
private boolean
t
=false
;
// Monitor.m, line 13:     _condvar ponganLosToppings;


// Monitor.m, line 14: 


// Monitor.m, line 15: 


// Monitor.m, line 16: _proc String preprarpizza(){

private m_condvar ponganLosToppings = new m_condvar("ponganLosToppings");
public
String
preprarpizza
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 17:     System.out.println("La pizza se encuentra en la mesa");

System
.out
.println
("La pizza se encuentra en la mesa");
// Monitor.m, line 18:     p=true;

p
=true
;
// Monitor.m, line 19:     _signal(ponganLaPizza);

{ if ((ponganLaPizza ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 20: 


// Monitor.m, line 21:     if(!t){

if
(!t
){
// Monitor.m, line 22:         _wait(ponganLosToppings);

{  m_condvar m_cv = (ponganLosToppings );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 23:     }


// Monitor.m, line 24: 


// Monitor.m, line 25:     p=false;

}p
=false
;
// Monitor.m, line 26:     s=false;

s
=false
;
// Monitor.m, line 27:     q=false;

q
=false
;
// Monitor.m, line 28:     t=false;

t
=false
;
// Monitor.m, line 29:     _return "pizza terminada";

{ if (true) {
  m_next();
  return 
"pizza terminada"
// Monitor.m, line 30: }

;
}}

// Monitor.m, line 31: 


// Monitor.m, line 32: _proc void colocarSalsa(){

  m_next();
throw new RuntimeException("reached end of non-void _proc (Monitor.m, line 32) without executing a return");
}
public
void
colocarSalsa
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 33:     if(!p){

if
(!p
){
// Monitor.m, line 34:         _wait(ponganLaPizza);

{  m_condvar m_cv = (ponganLaPizza );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 35:     }


// Monitor.m, line 36: 


// Monitor.m, line 37:     s=true;

}s
=true
;
// Monitor.m, line 38:     System.out.println("Se le coloco salsa a la pizza");

System
.out
.println
("Se le coloco salsa a la pizza");
// Monitor.m, line 39:     _signal(ponganLaSalsa);

{ if ((ponganLaSalsa ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 40: 


// Monitor.m, line 41: }


// Monitor.m, line 42: 


// Monitor.m, line 43: _proc void colocarQueso(){

  m_next();
}
public
void
colocarQueso
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 44:     if(!s){

if
(!s
){
// Monitor.m, line 45:         _wait(ponganLaSalsa);

{  m_condvar m_cv = (ponganLaSalsa );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 46:     }


// Monitor.m, line 47: 


// Monitor.m, line 48:     q=true;

}q
=true
;
// Monitor.m, line 49:     System.out.println("Se le coloco queso a la pizza");

System
.out
.println
("Se le coloco queso a la pizza");
// Monitor.m, line 50:     _signal(ponganElQueso);

{ if ((ponganElQueso ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 51: }


// Monitor.m, line 52: 


// Monitor.m, line 53: _proc void colocarToppings(){

  m_next();
}
public
void
colocarToppings
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 54:     if(!q){

if
(!q
){
// Monitor.m, line 55:         _wait(ponganElQueso);

{  m_condvar m_cv = (ponganElQueso );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 56:     }


// Monitor.m, line 57: 


// Monitor.m, line 58:     t=true;

}t
=true
;
// Monitor.m, line 59:     System.out.println("Se le coloco toppings a la pizza");

System
.out
.println
("Se le coloco toppings a la pizza");
// Monitor.m, line 60:     _signal(ponganLosToppings);

{ if ((ponganLosToppings ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 61: }


// Monitor.m, line 62: 


// Monitor.m, line 63: }
  m_next();
}
}

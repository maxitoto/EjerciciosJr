/* This JR file was generated by m2jr */
/* for the signal and continue signaling discipline */


// Monitor.m, line 1: _monitor Monitor{

class Monitor {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public Monitor(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// Monitor.m, line 2: 


// Monitor.m, line 3:     _var int fichero = 0;

private int
fichero
=0;
// Monitor.m, line 4: 


// Monitor.m, line 5:     _var int cantLectoresEsperando = 0;

private int
cantLectoresEsperando
=0;
// Monitor.m, line 6:     _var int cantLectoresLeyendo = 0;

private int
cantLectoresLeyendo
=0;
// Monitor.m, line 7: 


// Monitor.m, line 8:     _var int cantEscritoresEsperando = 0;

private int
cantEscritoresEsperando
=0;
// Monitor.m, line 9:     _var int cantEscritoresEscribiendo = 0;

private int
cantEscritoresEscribiendo
=0;
// Monitor.m, line 10: 


// Monitor.m, line 11:     _condvar esperandoLeer; 


// Monitor.m, line 12:     _condvar esperandoEscribir;

private m_condvar esperandoLeer = new m_condvar("esperandoLeer");

// Monitor.m, line 13: 


// Monitor.m, line 14:     _proc void escribir(int id){

private m_condvar esperandoEscribir = new m_condvar("esperandoEscribir");
public
void
escribir
(int
id
){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 15:         while(cantEscritoresEscribiendo == 1 | cantLectoresLeyendo>0){//si alguien escribe o alguien esta leyendo, espero

while
(cantEscritoresEscribiendo
==1|cantLectoresLeyendo
>0){
// Monitor.m, line 16:             cantEscritoresEsperando++;

cantEscritoresEsperando
++;
// Monitor.m, line 17:             _wait(esperandoEscribir);

{  m_condvar m_cv = (esperandoEscribir );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 18:             cantEscritoresEsperando--;

cantEscritoresEsperando
--;
// Monitor.m, line 19:         }


// Monitor.m, line 20:         


// Monitor.m, line 21: 


// Monitor.m, line 22:         cantEscritoresEscribiendo++;

}cantEscritoresEscribiendo
++;
// Monitor.m, line 23:         fichero = (int)(Math.random()*50);

fichero
=(int
)(Math
.random
()*50);
// Monitor.m, line 24:          System.out.println(

System
.out
.println
(
// Monitor.m, line 25:             " Escritor "+ id +" esta por escribir y dice{"+

" Escritor "+id
+" esta por escribir y dice{"+
// Monitor.m, line 26:             " lect leyendo: "+ cantLectoresLeyendo+

" lect leyendo: "+cantLectoresLeyendo
+
// Monitor.m, line 27:             " lect esperando: "+ cantLectoresEsperando+ 

" lect esperando: "+cantLectoresEsperando
+
// Monitor.m, line 28:             " escr escribiendo: "+cantEscritoresEscribiendo+

" escr escribiendo: "+cantEscritoresEscribiendo
+
// Monitor.m, line 29:             " escr esperando: "+cantEscritoresEsperando+"}"

" escr esperando: "+cantEscritoresEsperando
+"}"
// Monitor.m, line 30:         );

);
// Monitor.m, line 31:         


// Monitor.m, line 32:         cantEscritoresEscribiendo--;

cantEscritoresEscribiendo
--;
// Monitor.m, line 33: 


// Monitor.m, line 34:         if(cantLectoresEsperando>0 & cantEscritoresEscribiendo==0){//si hay lectores esperando y nadie escribiendo, despiesto a lectores

if
(cantLectoresEsperando
>0&cantEscritoresEscribiendo
==0){
// Monitor.m, line 35:             for(int j = 0; j<cantLectoresEsperando; j++){

for
(int
j
=0;j
<cantLectoresEsperando
;j
++){
// Monitor.m, line 36:                 _signal(esperandoLeer);

(esperandoLeer ).m_signal();

// Monitor.m, line 37:             }


// Monitor.m, line 38:         }else{

}}else
{
// Monitor.m, line 39:                 if(cantEscritoresEsperando>0 & cantLectoresLeyendo==0){//si hay escritores esperando y nadie leyendo, despiesto a un escritor

if
(cantEscritoresEsperando
>0&cantLectoresLeyendo
==0){
// Monitor.m, line 40:                     _signal(esperandoEscribir);

(esperandoEscribir ).m_signal();

// Monitor.m, line 41:                 }


// Monitor.m, line 42:             }

}
// Monitor.m, line 43: 


// Monitor.m, line 44:         System.out.println("escritor"+ id+" dejo de escribir");

}System
.out
.println
("escritor"+id
+" dejo de escribir");
// Monitor.m, line 45:     }


// Monitor.m, line 46: 


// Monitor.m, line 47: 


// Monitor.m, line 48:     _proc int leer(int id){

  m_next();
}
public
int
leer
(int
id
){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 49:         System.out.println("leer "+id+" entro");

System
.out
.println
("leer "+id
+" entro");
// Monitor.m, line 50:         while(cantEscritoresEscribiendo == 1){//si estan escribiendo, espero

while
(cantEscritoresEscribiendo
==1){
// Monitor.m, line 51:             cantLectoresEsperando++;

cantLectoresEsperando
++;
// Monitor.m, line 52:             _wait(esperandoLeer);

{  m_condvar m_cv = (esperandoLeer );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 53:             cantLectoresEsperando--;

cantLectoresEsperando
--;
// Monitor.m, line 54:         }


// Monitor.m, line 55:     


// Monitor.m, line 56:         cantLectoresLeyendo++;

}cantLectoresLeyendo
++;
// Monitor.m, line 57:         System.out.println(

System
.out
.println
(
// Monitor.m, line 58:             " lector "+ id +" esta por leer y dice{"+

" lector "+id
+" esta por leer y dice{"+
// Monitor.m, line 59:             " lect leyendo: "+ cantLectoresLeyendo+

" lect leyendo: "+cantLectoresLeyendo
+
// Monitor.m, line 60:             " lect esperando: "+ cantLectoresEsperando+ 

" lect esperando: "+cantLectoresEsperando
+
// Monitor.m, line 61:             " escr escribiendo: "+cantEscritoresEscribiendo+

" escr escribiendo: "+cantEscritoresEscribiendo
+
// Monitor.m, line 62:             " escr esperando: "+cantEscritoresEsperando+"}"

" escr esperando: "+cantEscritoresEsperando
+"}"
// Monitor.m, line 63:         );

);
// Monitor.m, line 64:         _return fichero;

{ if (true) {
  m_next();
  return 
fichero

// Monitor.m, line 65:     }    

;
}}

// Monitor.m, line 66: 


// Monitor.m, line 67:     _proc void pararDeLeer(int id){

  m_next();
throw new RuntimeException("reached end of non-void _proc (Monitor.m, line 67) without executing a return");
}
public
void
pararDeLeer
(int
id
){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 68:         cantLectoresLeyendo--;

cantLectoresLeyendo
--;
// Monitor.m, line 69:         System.out.println(

System
.out
.println
(
// Monitor.m, line 70:             " lector "+ id +" dejo de leer y dice{"+

" lector "+id
+" dejo de leer y dice{"+
// Monitor.m, line 71:             " lect leyendo: "+ cantLectoresLeyendo+

" lect leyendo: "+cantLectoresLeyendo
+
// Monitor.m, line 72:             " lect esperando: "+ cantLectoresEsperando+ 

" lect esperando: "+cantLectoresEsperando
+
// Monitor.m, line 73:             " escr escribiendo: "+cantEscritoresEscribiendo+

" escr escribiendo: "+cantEscritoresEscribiendo
+
// Monitor.m, line 74:             " escr esperando: "+cantEscritoresEsperando+"}"

" escr esperando: "+cantEscritoresEsperando
+"}"
// Monitor.m, line 75:         );

);
// Monitor.m, line 76:         if(cantEscritoresEsperando>0 & cantLectoresLeyendo == 0 & cantEscritoresEscribiendo == 0){//si hay escritores esperando, no hay nadie leyendo y nadie escribiendo, entonces despiesto a un escritor

if
(cantEscritoresEsperando
>0&cantLectoresLeyendo
==0&cantEscritoresEscribiendo
==0){
// Monitor.m, line 77:             _signal(esperandoEscribir);

(esperandoEscribir ).m_signal();

// Monitor.m, line 78:         }else{

}else
{
// Monitor.m, line 79:                 if(cantLectoresEsperando>0 & cantEscritoresEscribiendo==0){//si hay lectores esperando y no hay nadie escribiendo, despiesto a todos los lectores

if
(cantLectoresEsperando
>0&cantEscritoresEscribiendo
==0){
// Monitor.m, line 80:                     for(int j = 0; j<cantLectoresEsperando; j++){

for
(int
j
=0;j
<cantLectoresEsperando
;j
++){
// Monitor.m, line 81:                         _signal(esperandoLeer);

(esperandoLeer ).m_signal();

// Monitor.m, line 82:                     }


// Monitor.m, line 83:                 }

}
// Monitor.m, line 84:                                                 


// Monitor.m, line 85:             }

}
// Monitor.m, line 86:     }

}
// Monitor.m, line 87: 


// Monitor.m, line 88: }
  m_next();
}
}

/* This JR file was generated by m2jr */
/* for the signal and continue signaling discipline */


// Semaforo.m, line 1: _monitor Semaforo{

class Semaforo {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public Semaforo(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// Semaforo.m, line 2: 


// Semaforo.m, line 3:     _var int bloqueados = 1;

private int
bloqueados
=1;
// Semaforo.m, line 4:     _condvar s;


// Semaforo.m, line 5: 


// Semaforo.m, line 6:     _proc void await(){

private m_condvar s = new m_condvar("s");
public
void
await
(){
    op void m_return_from_wait();
    P(m_mutex);

// Semaforo.m, line 7:         while(bloqueados == 0){

while
(bloqueados
==0){
// Semaforo.m, line 8:             _wait(s);

{  m_condvar m_cv = (s );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Semaforo.m, line 9:         }


// Semaforo.m, line 10:         bloqueados=0;

}bloqueados
=0;
// Semaforo.m, line 11:     }


// Semaforo.m, line 12: 


// Semaforo.m, line 13:     _proc void asignal(){

  m_next();
}
public
void
asignal
(){
    op void m_return_from_wait();
    P(m_mutex);

// Semaforo.m, line 14:         bloqueados=1;

bloqueados
=1;
// Semaforo.m, line 15:         _signal(s);

(s ).m_signal();

// Semaforo.m, line 16:     }


// Semaforo.m, line 17: 


// Semaforo.m, line 18: }
  m_next();
}
}

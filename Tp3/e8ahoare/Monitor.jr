/* This JR file was generated by m2jr */
/* for the signal and wait signaling discipline */


// Monitor.m, line 1: _monitor Monitor{

class Monitor {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public Monitor(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// Monitor.m, line 2:     _var int bufferS = -1;

private int
bufferS
=-1;
// Monitor.m, line 3: 


// Monitor.m, line 4:     _var int vacios = 1;

private int
vacios
=1;
// Monitor.m, line 5:     _var int llenos = 0;

private int
llenos
=0;
// Monitor.m, line 6: 


// Monitor.m, line 7:     _condvar esperaraconsumir;


// Monitor.m, line 8:     _condvar esperaraproducir;

private m_condvar esperaraconsumir = new m_condvar("esperaraconsumir");

// Monitor.m, line 9: 


// Monitor.m, line 10:     _proc void producir(int id){

private m_condvar esperaraproducir = new m_condvar("esperaraproducir");
public
void
producir
(int
id
){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 11:         if(vacios==0){

if
(vacios
==0){
// Monitor.m, line 12:             _wait(esperaraproducir);

{  m_condvar m_cv = (esperaraproducir );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 13:         }


// Monitor.m, line 14: 


// Monitor.m, line 15:         bufferS = (int)(Math.random()*50);

}bufferS
=(int
)(Math
.random
()*50);
// Monitor.m, line 16:         System.out.println("productor "+id+" produce "+bufferS);

System
.out
.println
("productor "+id
+" produce "+bufferS
);
// Monitor.m, line 17:         llenos++;

llenos
++;
// Monitor.m, line 18:         vacios--;

vacios
--;
// Monitor.m, line 19:         _signal(esperaraconsumir);

{ if ((esperaraconsumir ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 20:     }


// Monitor.m, line 21: 


// Monitor.m, line 22:     _proc void consumir(int id){

  m_next();
}
public
void
consumir
(int
id
){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 23:         if(llenos==0){

if
(llenos
==0){
// Monitor.m, line 24:             _wait(esperaraconsumir);

{  m_condvar m_cv = (esperaraconsumir );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 25:         }


// Monitor.m, line 26: 


// Monitor.m, line 27:         System.out.println("consumidor "+id+" consume "+bufferS);

}System
.out
.println
("consumidor "+id
+" consume "+bufferS
);
// Monitor.m, line 28:         vacios++;

vacios
++;
// Monitor.m, line 29:         llenos--;

llenos
--;
// Monitor.m, line 30:         _signal(esperaraproducir);

{ if ((esperaraproducir ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 31:          


// Monitor.m, line 32:     }


// Monitor.m, line 33: 


// Monitor.m, line 34: }
  m_next();
}
}

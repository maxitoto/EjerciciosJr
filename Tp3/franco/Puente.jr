/* This JR file was generated by m2jr */
/* for the signal and continue signaling discipline */


// Puente.m, line 1: _monitor Puente {

class Puente {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public Puente(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// Puente.m, line 2:     private static final int N = 5; // Maximo numero de vehiculos en el puente a la vez

private
static
final
int
N
=5;
// Puente.m, line 3:     _var int turnoCount = 0; // Contador de vehiculos que han cruzado en el turno actual

private int
turnoCount
=0;
// Puente.m, line 4:     _var boolean turnoA = true; // True = turno del lado A, False = turno del lado B

private boolean
turnoA
=true
;
// Puente.m, line 5: 


// Puente.m, line 6:     _condvar CanalA; // Condicion para los vehiculos esperando en el lado A


// Puente.m, line 7:     _condvar CanalB; // Condicion para los vehiculos esperando en el lado B

private m_condvar CanalA = new m_condvar("CanalA");

// Puente.m, line 8: 


// Puente.m, line 9:     // Procedimiento para que un vehiculo del lado A entre al puente


// Puente.m, line 10:     _proc void entrar_lado_A() {

private m_condvar CanalB = new m_condvar("CanalB");
public
void
entrar_lado_A
(){
    op void m_return_from_wait();
    P(m_mutex);

// Puente.m, line 11:         while (!turnoA || turnoCount > N) {

while
(!turnoA
||turnoCount
>N
){
// Puente.m, line 12:             System.out.println("Entra un auto del lado A a la cola.");

System
.out
.println
("Entra un auto del lado A a la cola.");
// Puente.m, line 13:             _wait(CanalA); // Esperar en la condicion CanalA

{  m_condvar m_cv = (CanalA );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Puente.m, line 14:         }


// Puente.m, line 15:         turnoCount++; // Incrementar el contador de vehiculos en el turno actual

}turnoCount
++;
// Puente.m, line 16:     }


// Puente.m, line 17: 


// Puente.m, line 18:     // Procedimiento para que un vehiculo del lado B entre al puente


// Puente.m, line 19:     _proc void entrar_lado_B() {

  m_next();
}
public
void
entrar_lado_B
(){
    op void m_return_from_wait();
    P(m_mutex);

// Puente.m, line 20:         while (turnoA || turnoCount > N) {

while
(turnoA
||turnoCount
>N
){
// Puente.m, line 21:             System.out.println("Entra un auto del lado B a la cola.");

System
.out
.println
("Entra un auto del lado B a la cola.");
// Puente.m, line 22:             _wait(CanalB); // Esperar en la condicion CanalB

{  m_condvar m_cv = (CanalB );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Puente.m, line 23:         }


// Puente.m, line 24:         turnoCount++; // Incrementar el contador de vehiculos en el turno actual

}turnoCount
++;
// Puente.m, line 25:     }


// Puente.m, line 26: 


// Puente.m, line 27:     // Procedimiento para que un vehiculo salga del puente


// Puente.m, line 28:     _proc void salir() {

  m_next();
}
public
void
salir
(){
    op void m_return_from_wait();
    P(m_mutex);

// Puente.m, line 29:         


// Puente.m, line 30:         


// Puente.m, line 31:         turnoCount--; // Disminuir el contador de vehiculos cruzando del turno actual

turnoCount
--;
// Puente.m, line 32: 


// Puente.m, line 33:         // Cambiar el turno si se han alcanzado N vehiculos o si no hay mas vehiculos del lado actual


// Puente.m, line 34:         if (turnoCount == 0 || turnoCount < 0) {

if
(turnoCount
==0||turnoCount
<0){
// Puente.m, line 35:             turnoA = !turnoA; // Cambiar el turno

turnoA
=!turnoA
;
// Puente.m, line 36:             turnoCount = 0; // Resetear el contador del turno

turnoCount
=0;
// Puente.m, line 37:             System.out.println("Cambio de Turno!");

System
.out
.println
("Cambio de Turno!");
// Puente.m, line 38:         }


// Puente.m, line 39:         


// Puente.m, line 40:         


// Puente.m, line 41:         


// Puente.m, line 42:         // Senalar a los vehiculos esperando en el lado correspondiente


// Puente.m, line 43:         if (turnoA) {

}if
(turnoA
){
// Puente.m, line 44:             System.out.println("Turno A ");

System
.out
.println
("Turno A ");
// Puente.m, line 45:             System.out.println("Cruzo un Auto del lado A.");

System
.out
.println
("Cruzo un Auto del lado A.");
// Puente.m, line 46:             _signal(CanalA);

(CanalA ).m_signal();

// Puente.m, line 47:         } else {

}else
{
// Puente.m, line 48:             System.out.println("Turno B ");

System
.out
.println
("Turno B ");
// Puente.m, line 49:             System.out.println("Cruzo un Auto del lado B.");

System
.out
.println
("Cruzo un Auto del lado B.");
// Puente.m, line 50:             _signal(CanalB);

(CanalB ).m_signal();

// Puente.m, line 51:         }


// Puente.m, line 52: 


// Puente.m, line 53:         System.out.println("====================");

}System
.out
.println
("====================");
// Puente.m, line 54:     }


// Puente.m, line 55: }

  m_next();
}

// Puente.m, line 56: 


// Puente.m, line 57: //La manera en que se compila este monitor es la siguiente 


// Puente.m, line 58: // m2jr Puente.m

}

/* This JR file was generated by m2jr */
/* for the signal and continue signaling discipline */


// Monitor.m, line 1: _monitor Monitor{

class Monitor {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public Monitor(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// Monitor.m, line 2: 


// Monitor.m, line 3:     static boolean[] consultorios = {true,true,true};

static
boolean
[]consultorios
={true
,true
,true
};
// Monitor.m, line 4:     _var int pacientesEsperando = 0;

private int
pacientesEsperando
=0;
// Monitor.m, line 5: 


// Monitor.m, line 6:     _var boolean noMeLlamen = true;

private boolean
noMeLlamen
=true
;
// Monitor.m, line 7:     _var boolean noAsignenPaciente = true;

private boolean
noAsignenPaciente
=true
;
// Monitor.m, line 8: 


// Monitor.m, line 9:     _condvar hayaclientesOconsultorioDisponible;


// Monitor.m, line 10:     _condvar serLlamado;

private m_condvar hayaclientesOconsultorioDisponible = new m_condvar("hayaclientesOconsultorioDisponible");

// Monitor.m, line 11:     _condvar serAtendido;

private m_condvar serLlamado = new m_condvar("serLlamado");

// Monitor.m, line 12:     _condvar asignenPaciente;

private m_condvar serAtendido = new m_condvar("serAtendido");

// Monitor.m, line 13: 


// Monitor.m, line 14:     _proc void formarse(){

private m_condvar asignenPaciente = new m_condvar("asignenPaciente");
public
void
formarse
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 15:         pacientesEsperando++;

pacientesEsperando
++;
// Monitor.m, line 16:         while(noMeLlamen){

while
(noMeLlamen
){
// Monitor.m, line 17:             System.out.println("Cliente esperando");

System
.out
.println
("Cliente esperando");
// Monitor.m, line 18:             _wait(serLlamado);

{  m_condvar m_cv = (serLlamado );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 19:         }


// Monitor.m, line 20:         pacientesEsperando--;

}pacientesEsperando
--;
// Monitor.m, line 21:     }


// Monitor.m, line 22: 


// Monitor.m, line 23: 


// Monitor.m, line 24:     _proc int asignarPacienteAConsultorio(){

  m_next();
}
public
int
asignarPacienteAConsultorio
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 25:         boolean consultorioNoDiponible = true;

boolean
consultorioNoDiponible
=true
;
// Monitor.m, line 26:         int numeroConsultorioDiponible=-1;

int
numeroConsultorioDiponible
=-1;
// Monitor.m, line 27: 


// Monitor.m, line 28:         for(int i = 0; i<3; i++){

for
(int
i
=0;i
<3;i
++){
// Monitor.m, line 29:             if (consultorios[i]){

if
(consultorios
[i
]){
// Monitor.m, line 30:                 consultorioNoDiponible=true;

consultorioNoDiponible
=true
;
// Monitor.m, line 31:                 numeroConsultorioDiponible=i;

numeroConsultorioDiponible
=i
;
// Monitor.m, line 32:                 break;

break
;
// Monitor.m, line 33:             }else{

}else
{
// Monitor.m, line 34:                 consultorioNoDiponible=false;

consultorioNoDiponible
=false
;
// Monitor.m, line 35:                 numeroConsultorioDiponible=-1;

numeroConsultorioDiponible
=-1;
// Monitor.m, line 36:             }


// Monitor.m, line 37:         }

}
// Monitor.m, line 38: 


// Monitor.m, line 39:         while(pacientesEsperando==0 || consultorioNoDiponible){

}while
(pacientesEsperando
==0||consultorioNoDiponible
){
// Monitor.m, line 40:             _wait(hayaclientesOconsultorioDisponible);

{  m_condvar m_cv = (hayaclientesOconsultorioDisponible );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 41: 


// Monitor.m, line 42:             for(int i = 0; i<3; i++){

for
(int
i
=0;i
<3;i
++){
// Monitor.m, line 43:             if (consultorios[i]){

if
(consultorios
[i
]){
// Monitor.m, line 44:                 consultorioNoDiponible=true;

consultorioNoDiponible
=true
;
// Monitor.m, line 45:                 numeroConsultorioDiponible=i;

numeroConsultorioDiponible
=i
;
// Monitor.m, line 46:                 break;

break
;
// Monitor.m, line 47:             }else{

}else
{
// Monitor.m, line 48:                 consultorioNoDiponible=false;

consultorioNoDiponible
=false
;
// Monitor.m, line 49:                 numeroConsultorioDiponible=-1;

numeroConsultorioDiponible
=-1;
// Monitor.m, line 50:             }


// Monitor.m, line 51:         }

}
// Monitor.m, line 52:         }

}
// Monitor.m, line 53: 


// Monitor.m, line 54:         System.out.println("le asigno a un cliente formado, un consultorio medico");

}System
.out
.println
("le asigno a un cliente formado, un consultorio medico");
// Monitor.m, line 55:         consultorios[numeroConsultorioDiponible]=false;

consultorios
[numeroConsultorioDiponible
]=false
;
// Monitor.m, line 56:         _signal(serLlamado);

(serLlamado ).m_signal();

// Monitor.m, line 57:         noAsignenPaciente=false;

noAsignenPaciente
=false
;
// Monitor.m, line 58:         _signal(asignenPaciente);

(asignenPaciente ).m_signal();

// Monitor.m, line 59:         _return numeroConsultorioDiponible;

{ if (true) {
  m_next();
  return 
numeroConsultorioDiponible

// Monitor.m, line 60:     }

;
}}

// Monitor.m, line 61: 


// Monitor.m, line 62: 


// Monitor.m, line 63:     _proc void atender(){

  m_next();
throw new RuntimeException("reached end of non-void _proc (Monitor.m, line 63) without executing a return");
}
public
void
atender
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 64:         while(noAsignenPaciente){

while
(noAsignenPaciente
){
// Monitor.m, line 65:             _wait(asignenPaciente);

{  m_condvar m_cv = (asignenPaciente );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 66:         }


// Monitor.m, line 67:     }

}
// Monitor.m, line 68: 


// Monitor.m, line 69:     _proc void liberarConsultorio(int consultorio){

  m_next();
}
public
void
liberarConsultorio
(int
consultorio
){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 70:         consultorios[consultorio]=true;

consultorios
[consultorio
]=true
;
// Monitor.m, line 71: 


// Monitor.m, line 72:     }


// Monitor.m, line 73: 


// Monitor.m, line 74: }
  m_next();
}
}

/* This JR file was generated by m2jr */
/* for the signal and wait signaling discipline */


// ReaderWriterMonitor.m, line 1: 


// ReaderWriterMonitor.m, line 2: _monitor ReaderWriterMonitor {

class ReaderWriterMonitor {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public ReaderWriterMonitor(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// ReaderWriterMonitor.m, line 3: 


// ReaderWriterMonitor.m, line 4: 


// ReaderWriterMonitor.m, line 5:     _var int lectoresActivos = 0;

private int
lectoresActivos
=0;
// ReaderWriterMonitor.m, line 6:     _var int escritoresActivos = 0;

private int
escritoresActivos
=0;
// ReaderWriterMonitor.m, line 7:     _var int escritoresEsperando = 0;

private int
escritoresEsperando
=0;
// ReaderWriterMonitor.m, line 8:     _var int lectoresEsperando = 0;

private int
lectoresEsperando
=0;
// ReaderWriterMonitor.m, line 9: 


// ReaderWriterMonitor.m, line 10:     _condvar puedo_leer;


// ReaderWriterMonitor.m, line 11:     _condvar puedo_escribir;

private m_condvar puedo_leer = new m_condvar("puedo_leer");

// ReaderWriterMonitor.m, line 12: 


// ReaderWriterMonitor.m, line 13: 


// ReaderWriterMonitor.m, line 14:     _proc void start_read() {

private m_condvar puedo_escribir = new m_condvar("puedo_escribir");
public
void
start_read
(){
    op void m_return_from_wait();
    P(m_mutex);

// ReaderWriterMonitor.m, line 15:         


// ReaderWriterMonitor.m, line 16:         pausa(150);

pausa
(150);
// ReaderWriterMonitor.m, line 17:         lectoresEsperando++;

lectoresEsperando
++;
// ReaderWriterMonitor.m, line 18:         if (escritoresActivos == 1) {

if
(escritoresActivos
==1){
// ReaderWriterMonitor.m, line 19:             _wait(puedo_leer); //bloqueo/espero a los escritores

{  m_condvar m_cv = (puedo_leer );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// ReaderWriterMonitor.m, line 20:         }


// ReaderWriterMonitor.m, line 21:         lectoresEsperando--;

}lectoresEsperando
--;
// ReaderWriterMonitor.m, line 22:         lectoresActivos++;

lectoresActivos
++;
// ReaderWriterMonitor.m, line 23:     }


// ReaderWriterMonitor.m, line 24: 


// ReaderWriterMonitor.m, line 25:     _proc void end_read() {

  m_next();
}
public
void
end_read
(){
    op void m_return_from_wait();
    P(m_mutex);

// ReaderWriterMonitor.m, line 26:         


// ReaderWriterMonitor.m, line 27:         pausa(150);

pausa
(150);
// ReaderWriterMonitor.m, line 28:         lectoresActivos--;

lectoresActivos
--;
// ReaderWriterMonitor.m, line 29:         


// ReaderWriterMonitor.m, line 30:         if (escritoresEsperando > 0) {

if
(escritoresEsperando
>0){
// ReaderWriterMonitor.m, line 31:             _signal(puedo_escribir);

{ if ((puedo_escribir ).m_signal()) {
  P(m_mutex);
}}

// ReaderWriterMonitor.m, line 32:         } else {

}else
{
// ReaderWriterMonitor.m, line 33:             _signal(puedo_leer);

{ if ((puedo_leer ).m_signal()) {
  P(m_mutex);
}}

// ReaderWriterMonitor.m, line 34:         }


// ReaderWriterMonitor.m, line 35: 


// ReaderWriterMonitor.m, line 36:     }

}
// ReaderWriterMonitor.m, line 37: 


// ReaderWriterMonitor.m, line 38:     _proc void write(int i) {

  m_next();
}
public
void
write
(int
i
){
    op void m_return_from_wait();
    P(m_mutex);

// ReaderWriterMonitor.m, line 39: 


// ReaderWriterMonitor.m, line 40:         escritoresEsperando++;

escritoresEsperando
++;
// ReaderWriterMonitor.m, line 41:         if (lectoresActivos > 0 || escritoresActivos > 0) {

if
(lectoresActivos
>0||escritoresActivos
>0){
// ReaderWriterMonitor.m, line 42:             _wait(puedo_escribir);    

{  m_condvar m_cv = (puedo_escribir );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// ReaderWriterMonitor.m, line 43:         }


// ReaderWriterMonitor.m, line 44:         escritoresEsperando--;

}escritoresEsperando
--;
// ReaderWriterMonitor.m, line 45:         escritoresActivos++;

escritoresActivos
++;
// ReaderWriterMonitor.m, line 46:         //escribe


// ReaderWriterMonitor.m, line 47:         System.out.println("el proceso " + i + " escribio");

System
.out
.println
("el proceso "+i
+" escribio");
// ReaderWriterMonitor.m, line 48:         escritoresActivos--;

escritoresActivos
--;
// ReaderWriterMonitor.m, line 49: 


// ReaderWriterMonitor.m, line 50:         if (escritoresEsperando > 0) {

if
(escritoresEsperando
>0){
// ReaderWriterMonitor.m, line 51:             _signal(puedo_escribir);

{ if ((puedo_escribir ).m_signal()) {
  P(m_mutex);
}}

// ReaderWriterMonitor.m, line 52:         } else {

}else
{
// ReaderWriterMonitor.m, line 53:             _signal(puedo_leer);

{ if ((puedo_leer ).m_signal()) {
  P(m_mutex);
}}

// ReaderWriterMonitor.m, line 54:         }


// ReaderWriterMonitor.m, line 55: 


// ReaderWriterMonitor.m, line 56:     }

}
// ReaderWriterMonitor.m, line 57: 


// ReaderWriterMonitor.m, line 58:     private static op void pausa(int tiempo){

  m_next();
}
private
static
op
void
pausa
(int
tiempo
){
// ReaderWriterMonitor.m, line 59: 


// ReaderWriterMonitor.m, line 60:         try{

try
{
// ReaderWriterMonitor.m, line 61:             Thread.sleep(tiempo);

Thread
.sleep
(tiempo
);
// ReaderWriterMonitor.m, line 62:         }catch(java.lang.Exception e){}

}catch
(java
.lang
.Exception
e
){
// ReaderWriterMonitor.m, line 63: 


// ReaderWriterMonitor.m, line 64:     }

}
// ReaderWriterMonitor.m, line 65:            


// ReaderWriterMonitor.m, line 66: 


// ReaderWriterMonitor.m, line 67: 


// ReaderWriterMonitor.m, line 68: }
}}

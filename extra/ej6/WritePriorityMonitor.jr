/* This JR file was generated by m2jr */
/* for the signal and urgent wait signaling discipline */


// WritePriorityMonitor.m, line 1: _monitor WritePriorityMonitor {

class WritePriorityMonitor {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public WritePriorityMonitor(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// WritePriorityMonitor.m, line 2: 


// WritePriorityMonitor.m, line 3:     _var int waiting_readers = 0; 

private int
waiting_readers
=0;
// WritePriorityMonitor.m, line 4:     _var int waiting_writers = 0;

private int
waiting_writers
=0;
// WritePriorityMonitor.m, line 5: 


// WritePriorityMonitor.m, line 6:     _var int active_readers = 0;

private int
active_readers
=0;
// WritePriorityMonitor.m, line 7:     _var boolean active_writers = false;

private boolean
active_writers
=false
;
// WritePriorityMonitor.m, line 8: 


// WritePriorityMonitor.m, line 9:     _condvar can_read;


// WritePriorityMonitor.m, line 10:     _condvar can_write;

private m_condvar can_read = new m_condvar("can_read");

// WritePriorityMonitor.m, line 11: 


// WritePriorityMonitor.m, line 12:     _proc void request_read() {

private m_condvar can_write = new m_condvar("can_write");
public
void
request_read
(){
    op void m_return_from_wait();
    P(m_mutex);

// WritePriorityMonitor.m, line 13:         waiting_readers++;

waiting_readers
++;
// WritePriorityMonitor.m, line 14:         if (active_writers) {

if
(active_writers
){
// WritePriorityMonitor.m, line 15:             _wait(can_read);

{  m_condvar m_cv = (can_read );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// WritePriorityMonitor.m, line 16:         }


// WritePriorityMonitor.m, line 17:         waiting_readers--;

}waiting_readers
--;
// WritePriorityMonitor.m, line 18:         active_readers++;

active_readers
++;
// WritePriorityMonitor.m, line 19:     }


// WritePriorityMonitor.m, line 20: 


// WritePriorityMonitor.m, line 21:     _proc void release_read() {

  m_next();
}
public
void
release_read
(){
    op void m_return_from_wait();
    P(m_mutex);

// WritePriorityMonitor.m, line 22:         active_readers--;

active_readers
--;
// WritePriorityMonitor.m, line 23:         if (active_readers == 0 || waiting_writers > 0) {

if
(active_readers
==0||waiting_writers
>0){
// WritePriorityMonitor.m, line 24:             _signal(can_write);

{m_n_urgentq++;if ((can_write ).m_signal()) {
  P(m_urgentq);
}
else {
  m_n_urgentq--;
}
}

// WritePriorityMonitor.m, line 25:         }


// WritePriorityMonitor.m, line 26:     }

}
// WritePriorityMonitor.m, line 27: 


// WritePriorityMonitor.m, line 28:     _proc void request_write() {

  m_next();
}
public
void
request_write
(){
    op void m_return_from_wait();
    P(m_mutex);

// WritePriorityMonitor.m, line 29:         waiting_writers++;

waiting_writers
++;
// WritePriorityMonitor.m, line 30:         if (active_readers > 0 || active_writers) {

if
(active_readers
>0||active_writers
){
// WritePriorityMonitor.m, line 31:             _wait(can_write);

{  m_condvar m_cv = (can_write );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// WritePriorityMonitor.m, line 32:         }


// WritePriorityMonitor.m, line 33:         active_writers = true;

}active_writers
=true
;
// WritePriorityMonitor.m, line 34:         waiting_writers--;

waiting_writers
--;
// WritePriorityMonitor.m, line 35: 


// WritePriorityMonitor.m, line 36:     }


// WritePriorityMonitor.m, line 37: 


// WritePriorityMonitor.m, line 38:     _proc void release_write() {

  m_next();
}
public
void
release_write
(){
    op void m_return_from_wait();
    P(m_mutex);

// WritePriorityMonitor.m, line 39:         active_writers = false;

active_writers
=false
;
// WritePriorityMonitor.m, line 40:         if (waiting_writers > 0) {

if
(waiting_writers
>0){
// WritePriorityMonitor.m, line 41:             _signal(can_write);

{m_n_urgentq++;if ((can_write ).m_signal()) {
  P(m_urgentq);
}
else {
  m_n_urgentq--;
}
}

// WritePriorityMonitor.m, line 42:         } else {

}else
{
// WritePriorityMonitor.m, line 43:             _signal(can_read); //si no hay lectores no sirve para nada este signal

{m_n_urgentq++;if ((can_read ).m_signal()) {
  P(m_urgentq);
}
else {
  m_n_urgentq--;
}
}

// WritePriorityMonitor.m, line 44:         }


// WritePriorityMonitor.m, line 45:     }

}
// WritePriorityMonitor.m, line 46: }
  m_next();
}
}

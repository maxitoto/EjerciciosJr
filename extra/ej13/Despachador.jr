/* This JR file was generated by m2jr */
/* for the signal and urgent wait signaling discipline */


// Despachador.m, line 1: _monitor Despachador{

class Despachador {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public Despachador(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// Despachador.m, line 2: 


// Despachador.m, line 3:     _var boolean cpu_uno_libre = true;

private boolean
cpu_uno_libre
=true
;
// Despachador.m, line 4:     _var boolean cpu_dos_libre = true;

private boolean
cpu_dos_libre
=true
;
// Despachador.m, line 5: 


// Despachador.m, line 6:     _condvar cpu;


// Despachador.m, line 7:     _condvar wait_process; 

private m_condvar cpu = new m_condvar("cpu");

// Despachador.m, line 8: 


// Despachador.m, line 9:     _var int procesos_esperando = 0;

private m_condvar wait_process = new m_condvar("wait_process");
private int
procesos_esperando
=0;
// Despachador.m, line 10: 


// Despachador.m, line 11:     _var int procesos_asignados = 0;

private int
procesos_asignados
=0;
// Despachador.m, line 12: 


// Despachador.m, line 13:     _proc void asignar_proceso(int cpu_id) {

public
void
asignar_proceso
(int
cpu_id
){
    op void m_return_from_wait();
    P(m_mutex);

// Despachador.m, line 14:         if (cpu_id == 1) {

if
(cpu_id
==1){
// Despachador.m, line 15:             if (cpu_uno_libre) {

if
(cpu_uno_libre
){
// Despachador.m, line 16:                 _wait(wait_process);

{  m_condvar m_cv = (wait_process );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Despachador.m, line 17:             }


// Despachador.m, line 18:         } else {

}}else
{
// Despachador.m, line 19:             if (cpu_dos_libre) {

if
(cpu_dos_libre
){
// Despachador.m, line 20:                 _wait(wait_process);

{  m_condvar m_cv = (wait_process );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Despachador.m, line 21:             }


// Despachador.m, line 22:         }

}
// Despachador.m, line 23:     }

}
// Despachador.m, line 24: 


// Despachador.m, line 25:     _proc void terminar_proceso(int cpu_id) {

  m_next();
}
public
void
terminar_proceso
(int
cpu_id
){
    op void m_return_from_wait();
    P(m_mutex);

// Despachador.m, line 26:         if (cpu_id == 1) {

if
(cpu_id
==1){
// Despachador.m, line 27:             cpu_uno_libre = true;

cpu_uno_libre
=true
;
// Despachador.m, line 28:             _signal(cpu);

{m_n_urgentq++;if ((cpu ).m_signal()) {
  P(m_urgentq);
}
else {
  m_n_urgentq--;
}
}

// Despachador.m, line 29:         } else {

}else
{
// Despachador.m, line 30:             cpu_dos_libre = true;

cpu_dos_libre
=true
;
// Despachador.m, line 31:         }


// Despachador.m, line 32:     }

}
// Despachador.m, line 33: 


// Despachador.m, line 34:     _proc void adquirir_cpu() {

  m_next();
}
public
void
adquirir_cpu
(){
    op void m_return_from_wait();
    P(m_mutex);

// Despachador.m, line 35:         procesos_esperando++;

procesos_esperando
++;
// Despachador.m, line 36:         if (cpu_uno_libre) {

if
(cpu_uno_libre
){
// Despachador.m, line 37:             cpu_uno_libre = false;

cpu_uno_libre
=false
;
// Despachador.m, line 38:             _signal(wait_process);

{m_n_urgentq++;if ((wait_process ).m_signal()) {
  P(m_urgentq);
}
else {
  m_n_urgentq--;
}
}

// Despachador.m, line 39:             procesos_asignados++;

procesos_asignados
++;
// Despachador.m, line 40:         } else if(cpu_dos_libre) {

}else
if
(cpu_dos_libre
){
// Despachador.m, line 41:             cpu_dos_libre = false;

cpu_dos_libre
=false
;
// Despachador.m, line 42:             _signal(wait_process);

{m_n_urgentq++;if ((wait_process ).m_signal()) {
  P(m_urgentq);
}
else {
  m_n_urgentq--;
}
}

// Despachador.m, line 43:             procesos_asignados++;

procesos_asignados
++;
// Despachador.m, line 44:         } else {

}else
{
// Despachador.m, line 45:             _wait(cpu);

{  m_condvar m_cv = (cpu );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Despachador.m, line 46:             procesos_asignados++;

procesos_asignados
++;
// Despachador.m, line 47:         }


// Despachador.m, line 48:         System.out.println("c");

}System
.out
.println
("c");
// Despachador.m, line 49:         procesos_esperando--;

procesos_esperando
--;
// Despachador.m, line 50:     }


// Despachador.m, line 51: 


// Despachador.m, line 52:     _proc void get_procesos_asignados() {

  m_next();
}
public
void
get_procesos_asignados
(){
    op void m_return_from_wait();
    P(m_mutex);

// Despachador.m, line 53:         System.out.println(procesos_asignados); 

System
.out
.println
(procesos_asignados
);
// Despachador.m, line 54:     }


// Despachador.m, line 55:     


// Despachador.m, line 56: }
  m_next();
}
}
